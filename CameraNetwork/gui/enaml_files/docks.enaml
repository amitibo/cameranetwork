from enaml.layout.api import *
from enaml.core.api import Include, Conditional, Looper
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.message_box import (MessageBox, about, critical, information,
    question, warning)

from mayavi.tools.mlab_scene_model import MlabSceneModel

from CameraNetwork import global_settings as gs
from CameraNetwork.gui.data_frame_table import DataFrameTable
from CameraNetwork.gui.image_analysis import ImageAnalysis
from CameraNetwork.gui.mayavi_canvas import MayaviCanvas

from .extra import GradientButtonSheet
from .popups import (ImageDataPopup, MsgDataPopup)
#from .popups import ImageDataPopup TODO Check if fixes issue #6
from .server_pages import (MainControlsPage, ImageControlPage, SeekControlPage,
    SunshaderControlPage, SprinklerControlPage, IntrinsicControlPage,
    ExtrinsicControlPage, RadiometricControlPage)
from .settings import (ArraySettingsDialog, ArraysSettingsDialog, CaptureDialog,
    SpaceCarvingSettingsDialog)


################################################################################
# The Server view
################################################################################
enamldef ServerView(DockItem):
    attr server_model

    attr server_id

    GradientButtonSheet:
        pass

    VGroup:
        Notebook:
            tab_style = 'preferences'

            MainControlsPage:
                title = 'Main'
                closable = False
                server_model_ = server_model

            ImageControlPage: image_page:
                title = 'Image'
                closable = False
                server_model_ = server_model

            SeekControlPage:
                title = 'Seek'
                closable = False
                server_model_ = server_model

            SunshaderControlPage:
                title = 'Sun Shader'
                closable = False
                server_model_ = server_model
                sunshader_angle_value << server_model.sunshader_required_angle

            SprinklerControlPage:
                title = 'Sprinkle'
                closable = False
                server_model_ = server_model

            IntrinsicControlPage:
                title = 'Intrinsic'
                closable = False
                server_model_ = server_model
                exposure_us << image_page.ff_exposure
                gain_db << image_page.ff_gain
                gain_boost<< image_page.ff_gain_boost

            ExtrinsicControlPage:
                title = 'Extrinsic'
                closable = False
                server_model_ = server_model

            RadiometricControlPage:
                title = 'Radiometric'
                closable = False
                sunphotometer_times = []
                server_model_ = server_model

        GroupBox:
            title = 'Message'

            constraints = [
                grid(
                    [lb_cmd,   fld_cmd,   pb_send],
                    [lb_reply, fld_reply, pb_data],
                    column_align='width',
                    row_align='v_center',
                ),
            ]

            Label: lb_cmd:
                text = 'Cmd:'
            Field: fld_cmd:
                text := server_model.cmd
            PushButton: pb_send:
                text = 'Send'
                clicked :: root_object().client_model.send_message(server_model)
            PushButton: pb_data:
                text = 'Data'
                clicked ::
                    popup = MsgDataPopup(msg_data=server_model.reply_data).show()
            Label: lb_reply:
                text = 'Reply:'
            Field: fld_reply:
                text << server_model.reply


################################################################################
# The Array View
################################################################################
enamldef ArrayView(FlowItem): array_view:
    alias export_flag
    alias image_widget

    attr array_model
    attr arrays_model
    attr server_id

    GroupBox: gb:
        title = "Camera {}".format(array_view.server_id)

        ImageAnalysis: image_widget:
            arrays_model = array_model.arrays_model

            #
            # Server data
            #
            server_id = array_view.server_id
            img_array << array_model.displayed_array

            #
            # Update the server mask
            #
            mask >> array_model.manual_mask

            #
            # Widgest coords
            #
            Almucantar_coords << array_model.Almucantar_coords
            PrincipalPlane_coords << array_model.PrincipalPlane_coords
            GRID_coords << array_model.GRID_coords
            Epipolar_coords << array_model.Epipolar_coords
            Sun_coords << array_model.Sun_coords

            #
            # View settings.
            #
            gamma << arrays_model.gamma
            intensity << arrays_model.intensity
            show_grid << arrays_model.show_grid
            show_mask << arrays_model.show_masks
            show_ROI << arrays_model.show_ROIs
            show_sun << arrays_model.show_sun

            #
            # Widget state
            #
            mask_ROI_state := array_model.mask_ROI_state
            ROI_state := array_model.ROI_state

        HGroup:
            PushButton:
                text = 'Image Data'
                clicked ::
                    ImageDataPopup(img_data_=array_model.img_data).show()

            PushButton:
                text = 'Image Settings'
                clicked ::
                    ArraySettingsDialog(
                        title="Camera {}".format(array_view.server_id),
                        array_model=array_view.array_model,
                        image_widget=array_view.image_widget,
                        ).show()

            CheckBox: export_flag:
                tool_tip = "Export for reconstruction"
                text = "Export"
                checked = True


################################################################################
# ArraysView
# Displays captured images/arrays.
#
enamldef ArraysView(DockItem): arrays_view:

    attr arrays
    attr main

    alias arrays_area
    alias array_views

    Container:
        constraints = [
            vbox(
                arrays_tb,
                arrays_cont,
            ),
        ]

        ToolBar: arrays_tb:
            ActionGroup:
                Action:
                    text = 'Capture Settings'
                    triggered ::
                        CaptureDialog(
                            title="Capture Settings",
                            main_model=arrays_view.main,
                            ).show()

                Action:
                    text = 'View Settings'
                    triggered ::
                        ArraysSettingsDialog(
                            title="Arrays Settings",
                            arrays_model=arrays_view.arrays,
                            ).show()

                Action:
                    text = 'Clear'
                    triggered ::
                        arrays.clear_arrays()
                        array_views.objects = []

                Action:
                    separator = True

            ActionGroup:
                Action:
                    text = 'Load ROI'
                    tool_tip = "Load the ROIs"
                    triggered ::
                        path = FileDialogEx.get_open_file_name()
                        if path:
                            arrays.load_rois(path)

                Action:
                    text = 'Save ROI'
                    tool_tip = "Save the ROIs"
                    triggered ::
                        arrays.save_rois()

                Action:
                    separator = True

            ActionGroup:
                 Action:
                    text = 'Save Extrinsics'
                    tool_tip = "Save current extrinsic on date."
                    triggered ::
                        arrays.save_extrinsics()

        Container: arrays_cont:
            FlowArea: arrays_area:
                Include: array_views:
                    pass


################################################################################
# Logger
# Logs servers exceptions.
#
enamldef LoggerView(DockItem):

    attr logger

    Container:
        constraints = [
            vbox(
                log_field,
                hbox(spacer, traceback_cb, clear_btn)
            )
        ]

        MultilineField: log_field:
            name = 'line-collector'
            text << logger.traceback_text if traceback_cb.checked else logger.log_text
            font = '9pt Courier'
            read_only = True

        CheckBox: traceback_cb:
            tool_tip = "Show exception traceback"
            text = 'Traceback'

        PushButton: clear_btn:
            text = 'Clear'
            clicked ::
                logger.clear()


################################################################################
# Mapper
# Shows a map of haifa with visualization of the cameras.
#
enamldef MapperView(DockItem): mapper_view:

    attr map3d

    Container:
        constraints = [
            vbox(
                mcanvas,
                hbox(
                    grid_cb,
                    ROIs_cb,
                    LOS_cb,
                    spacer,
                    clouds_pb,
                    clouds_cb,
                    beta_pb,
                    beta_cb
                ),
            ),
        ]

        MayaviCanvas: mcanvas:
            scene << map3d.map_scene
            show_toolbar = True

        CheckBox: grid_cb:
            tool_tip = "Show the reconstrction grid"
            checked := map3d.show_grid
            text = "Show Grid"

        CheckBox: ROIs_cb:
            tool_tip = "Show the camera ROIs"
            checked := map3d.show_ROIs
            text = "Show ROIs"

        CheckBox: LOS_cb:
            tool_tip = "Show the camera LOS"
            checked := map3d.show_LOS
            text = "Show LOS"

        PushButton: clouds_pb:
            text = 'Space Carving'
            clicked ::
                SpaceCarvingSettingsDialog(
                    map3d=mapper_view.map3d,
                    ).show()

        CheckBox: clouds_cb:
            tool_tip = "Show the 3D space carving."
            checked := map3d.show_space_carving
            text = "Show Space Carving"

        PushButton: beta_pb:
            text = 'Load Beta'
            clicked ::
                path = FileDialogEx.get_open_file_name()
                if path:
                    map3d.load_beta(path)

        CheckBox: beta_cb:
            tool_tip = "Show the 3D Beta"
            checked := map3d.show_beta
            text = "Show Beta"



################################################################################
# Times
# Allows querying, displaying and seeking time table of captured images.
#
enamldef TimesView(DockItem):

    attr main
    attr times

    Container:
        constraints = [
            vbox(
                hbox(update_pb, query_day, query_pb, force_cb, spacer),
                df,
                hbox(
                    resolution_lbl,
                    resolution_fld,
                    quality_cnt,
                    correct_radiometric_cb,
                    ignore_date_extrinsics_cb,
                    seek_pb,
                    spacer
                ),
            ),
            query_day.width == 90
        ]

        PushButton: update_pb:
            text = 'Update Days'
            clicked ::
                times.days_list = []
                main.broadcast_message(
                    gs.MSG_TYPE_DAYS,
                )

        ObjectCombo: query_day:
            items << times.days_list

        PushButton: query_pb:
            text = 'Query'
            clicked ::
                times.clear()
                main.broadcast_message(
                    gs.MSG_TYPE_QUERY,
                    kwds=dict(query_date=query_day.selected, force=force_cb.checked)
                )

        CheckBox: force_cb:
                tool_tip = "Force parsing day images."
                checked = True
                text = "Force Read"

        DataFrameTable: df:
            data_frame << times.images_df
            selected_index >> times.img_index

        Label: resolution_lbl:
            text = 'Resolution:'
        IntField: resolution_fld:
            minimum = 64
            maximum = 1001
            value = 301

        Container: quality_cnt:
            constraints = [
                hbox(HDR_cb, JPEG_cb, quality_fld),
            ]

            RadioButton: HDR_cb:
                tool_tip = "Return HDR image"
                checked = False
                text = "HDR"

            RadioButton: JPEG_cb:
                tool_tip = "Use JPEG compression"
                checked = True
                text = "JPEG"

            IntField: quality_fld:
                minimum = gs.MIN_JPEG_QUALITY
                value = 80
                maximum = 100
                enabled << JPEG_cb.checked

        CheckBox: correct_radiometric_cb:
                tool_tip = "Whether to apply radiometric correction."
                checked = False
                text = "Apply radiometric correction"

        CheckBox: ignore_date_extrinsics_cb:
                tool_tip = "Ignore the Extrinsic calibration save for dated."
                checked = True
                text = "Ignore Date Extrinsics"

        PushButton: seek_pb:
            text = 'Seek'
            clicked ::
                main.create_map()
                index = times.img_index
                if len(index) >1:
                    main.broadcast_message(
                        gs.MSG_TYPE_SEEK,
                        kwds=dict(
                            seek_time=index[0],
                            hdr_index=-1 if HDR_cb.checked else index[1],
                            normalize=True,
                            jpeg=quality_fld.value if JPEG_cb.checked else False,
                            resolution=resolution_fld.value,
                            correct_radiometric=correct_radiometric_cb.checked,
                            ignore_date_extrinsic=ignore_date_extrinsics_cb.checked,
                        )
                    )



################################################################################
# Servers
# Shows the complete list of connected servers.
#
enamldef ServerButton(FlowItem):

    attr main
    attr server_id
    attr server

    Container:
        PushButton:
            text = str(server_id)
            clicked ::

                name = 'camera_%s' % server_id
                title = 'Camera %s' % server_id

                if name not in [item.name for item in root_object().dock_area.dock_items()]:
                    #
                    # Recreate the extrinsic scene. It seems that the engine dies
                    # so I restart it.
                    #
                    server.extrinsic_scene = MlabSceneModel()

                    item = ServerView(
                        root_object().dock_area,
                        name=name,
                        title=title,
                        server_model=server,
                        server_id=server_id,
                        closable=True
                    )

                    root_object().dock_area.update_layout(
                        FloatItem(
                            item=name
                        )
                    )


enamldef ServersView(DockItem):

    attr main

    Container:
        constraints = [
            vbox(servers_cont)
        ]

        Container: servers_cont:
            FlowArea: servers_area:
                Include: servers_inc:
                    objects << [
                        ServerButton(
                            main=main,
                            server_id=si,
                            server=main.servers_dict[si]
                        ) for si in sorted(main.servers_dict.keys())
                   ]

