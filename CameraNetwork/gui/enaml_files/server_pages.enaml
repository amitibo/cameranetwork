import sys
if sys.platform == 'win32':
    from enaml import winutil
from enaml.image import Image
from enaml.layout.api import *
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogInstructionArea, TaskDialogStyleSheet)
from enaml.stdlib.message_box import (MessageBox, about, critical, information,
    question, warning)
from traits_enaml.widgets.mayavi_canvas import MayaviCanvas

import CameraNetwork.global_settings as gs
from CameraNetwork import sunphotometer as spm
from CameraNetwork.gui.data_frame_table import DataFrameTable
from .extra import SliderText
import glob
import pkg_resources


def restart_server(button, main_model, server_model):
    if button is not None:
        if button.text == 'Restart':
            main_model.send_message(server_model, gs.MSG_TYPE_RESTART)


def reboot_server(button, main_model, server_model):
    if button is not None:
        if button.text == 'Reboot':
            main_model.send_message(server_model, gs.MSG_TYPE_REBOOT)


enamldef UpdateTaskDialog(Dialog):
    title = 'Update Camera Fimware'

    attr revisions
    alias selected_revision: combo.selected

    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Available Revisions'
        TaskDialogContentArea:
            ObjectCombo: combo:
                items = revisions
        TaskDialogCommandArea:
            DialogButtonBox: bbox:
                buttons = [
                    DialogButton('Update', 'accept'),
                    DialogButton('Cancel', 'reject'),
                ]


################################################################################
# Panels
################################################################################
enamldef MainControlsPage(Page):
    attr server_model_

    Container:
        constraints = [
            hbox(
                vbox(
                    capture_gbx,
                    ssh_gbx,
                    general_gbx,
                ),
                status
            ),
            capture_gbx.width == 150,
            align('left', capture_gbx, ssh_gbx, general_gbx),
        ]


        GroupBox: capture_gbx:
            title = 'Capture Mode'

            PushButton: pb_loop:
                text = 'Loop'
                clicked ::
                    root_object().main_model.send_message(server_model_, gs.MSG_TYPE_LOOP)

            PushButton: pb_calib:
                text = 'Calib Imgs'
                clicked :: root_object().main_model.send_message(server_model_, gs.MSG_TYPE_CALIB_IMGS)

            PushButton: pb_halt:
                text = 'Halt'
                clicked :: root_object().main_model.send_message(server_model_, gs.MSG_TYPE_HALT)

        GroupBox: ssh_gbx:
            title = 'SSH'

            PushButton: pb_tunnel_on:
                text = 'Tunnel On'
                clicked :: root_object().main_model.send_message(
                    server_model_,
                    gs.MSG_TYPE_TUNNEL,
                    kwds=dict(tunnel_state=True)
                    )

            PushButton: pb_tunnel_off:
                text = 'Tunnel Off'
                clicked :: root_object().main_model.send_message(
                    server_model_,
                    gs.MSG_TYPE_TUNNEL,
                    kwds=dict(tunnel_state=False)
                    )

            PushButton: pb_putty:
                text = 'Putty'
                clicked :: root_object().main_model.send_message(server_model_, gs.MSG_TYPE_TUNNEL_CHECK)

            PushButton: pb_local:
                text = 'Local'
                clicked :: root_object().main_model.send_message(server_model_, gs.MSG_TYPE_LOCAL)

        GroupBox: general_gbx:
            title = 'General'

            PushButton: pb_status:
                text = "Status"
                clicked ::
                    root_object().main_model.send_message(server_model_, gs.MSG_TYPE_STATUS)

            PushButton: pb_settings:
                text = "Settings"
                clicked ::
                    root_object().main_model.send_message(server_model_, gs.MSG_TYPE_GET_SETTINGS)

            PushButton: pb_restart:
                text = 'Software Restart'
                style_class = 'gradient-button gb-yellow rounded'
                clicked ::
                    btns = [DialogButton('Restart', 'accept'),
                            DialogButton('Cancel', 'reject')]
                    restart_server(
                        warning(self, 'Restart Camera Software', 'Are you sure you want to restart the camera?', btns),
                        root_object().main_model,
                        server_model_
                    )

            PushButton: pb_reboot:
                text = 'Reboot'
                style_class = 'gradient-button gb-blue rounded'
                clicked ::
                    btns = [DialogButton('Reboot', 'accept'),
                            DialogButton('Cancel', 'reject')]
                    reboot_server(
                        warning(self, 'Reboot Camera', 'Are you sure you want to reboot the camera?', btns),
                        root_object().main_model,
                        server_model_
                    )

        MultilineField: status:
            text << server_model_.status_text
            font = '9pt Courier'
            read_only = True


enamldef ImageControlPage(Page):
    attr server_model_

    alias settings_form

    alias ff_exposure: ff_exposure.value
    alias ff_gain: ff_gain.value
    alias ff_gain_boost: ff_gain_boost.checked

    GroupBox:
        title = 'Image Sample'

        HGroup:
            Form: settings_form:
                Label:
                    text = 'Exp[us]:'
                IntField: ff_exposure:
                    minimum = 0
                    value = 500
                Label:
                    text = 'Gain[%]:'
                IntField: ff_gain:
                    minimum = 0
                    maximum = 100
                    value = 0
                Label:
                    text = 'Gain Boost:'
                CheckBox: ff_gain_boost:
                    pass
                Label:
                    text = 'Frames:'
                IntField: ff_frames_num:
                    minimum = 1
                    value = 1
                Label:
                    text = 'Color Mode:'
                ComboBox: cmode:
                    index = 0
                    items = [gs.COLOR_RAW, gs.COLOR_RGB]
                Label:
                    text = 'Resolution:'
                IntField: ff_resolution:
                    minimum = 64
                    maximum = 1001
                    value = 301

            VGroup:
                PushButton: pb_array:
                    text = 'Get Array'
                    clicked ::
                        root_object().main_model.create_map()
                        root_object().main_model.send_message(
                            server_model_,
                            gs.MSG_TYPE_ARRAY,
                            kwds=dict(
                                exposure_us=ff_exposure.value if ff_exposure.value>0 else None,
                                gain_db=ff_gain.value if ff_gain.value>0 else None,
                                frames_num=ff_frames_num.value,
                                color_mode=cmode.items[cmode.index],
                                gain_boost=ff_gain_boost.checked,
                                normalize=ff_normalized_array.checked,
                                jpeg=ff_JPEG.checked,
                                resolution=ff_resolution.value
                            )
                        )
                Form:
                    Label:
                        text = 'JPEG:'
                    CheckBox: ff_JPEG:
                        checked = True
                    Label:
                        text = 'Normalized:'
                    CheckBox: ff_normalized_array:
                        checked = True
                PushButton: pb_reset_camera:
                    text = 'Reset Camera'
                    clicked ::
                        root_object().main_model.send_message(
                            server_model_,
                            gs.MSG_TYPE_RESET_CAMERA,
                        )


enamldef SeekControlPage(Page):
    attr server_model_

    GroupBox:
        title = 'Seek Array'

        Container:
            constraints = [
                vbox(
                    hbox(update_pb, query_day, query_pb, force_cb, spacer),
                    df,
                    hbox(resolution_lbl, resolution_fld, quality_cnt, seek_pb, spacer),
                ),
                df.height == 250,
                query_day.width == 90,
            ]

            PushButton: update_pb:
                text = 'Update Days'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_DAYS,
                    )

            ObjectCombo: query_day:
                items << server_model_.days_list

            PushButton: query_pb:
                text = 'Query'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_QUERY,
                        kwds=dict(query_date=query_day.selected, force=force_cb.checked),
                    )

            CheckBox: force_cb:
                    tool_tip = "Force parsing day images."
                    text = "Force Read"

            DataFrameTable: df:
                data_frame << server_model_.images_df
                selected_index >> server_model_.img_index

            Label: resolution_lbl:
                text = 'Resolution:'
            IntField: resolution_fld:
                minimum = 64
                maximum = 1001
                value = 301

            Container: quality_cnt:
                constraints = [
                    hbox(HDR_cb, JPEG_cb, quality_fld),
                ]

                RadioButton: HDR_cb:
                    tool_tip = "Return HDR image"
                    checked = False
                    text = "HDR"

                RadioButton: JPEG_cb:
                    tool_tip = "Use JPEG compression"
                    checked = True
                    text = "JPEG"

                IntField: quality_fld:
                    minimum = gs.MIN_JPEG_QUALITY
                    value = 80
                    maximum = 100
                    enabled << JPEG_cb.checked

            PushButton: seek_pb:
                text = 'Seek'
                clicked ::
                    index = server_model_.img_index
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_SEEK,
                        kwds=dict(
                            seek_time=index[0],
                            hdr_index=-1 if HDR_cb.checked else index[1],
                            normalize=True,
                            jpeg=quality_fld.value if JPEG_cb.checked else False,
                            resolution=resolution_fld.value
                        )
                    )


enamldef SunshaderControlPage(Page):
    attr server_model_

    alias sunshader_angle_value : sunshader_angle.value

    GroupBox:
        title = 'Sun Shader'

        SliderText: slider_sunshader:
            label.text = 'Angle'

            slider.value ::
                root_object().main_model.send_message(
                    server_model_,
                    gs.MSG_TYPE_SUNSHADER,
                    kwds=dict(
                        angle=slider.value
                    )
                )

        HGroup:
            PushButton: pb_scan:
                text = 'Scan'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_SUNSHADER_SCAN,
                    )

            IntField: sunshader_angle:
                read_only = True

        MPLCanvas: canvas:
            figure << server_model_.sunshader_figure


enamldef SprinklerControlPage(Page):
    attr server_model_

    GroupBox:
        title = 'Sprinkler'

        HGroup:
            PushButton: pb_sprinkle:
                text = 'Sprinkle'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_SPRINKLER,
                        kwds=dict(
                            period=sprinkler_period.value
                        )
                    )

            Label:
                text = 'Period:'
            FloatField: sprinkler_period:
                value = gs.SPRINKLER_PERIOD


enamldef IntrinsicControlPage(Page):
    attr server_model_

    attr exposure_us
    attr gain_db
    attr gain_boost

    Form:
        Label:
            text = 'nx:'
        IntField: calib_nx:
           minimum = 6
           maximum = 12
           value = 9
        Label:
            text = 'ny:'
        IntField: calib_ny:
            minimum = 5
            maximum = 10
            value = 6
        Label:
            text = 'imgs num:'
        IntField: calib_imgs:
            minimum = 10
            maximum = 50
            value = 40
        Label:
            text = 'imgs dely:'
        IntField: calib_delay:
            minimum = 1
            maximum = 3
            value = 2

        HGroup:
            PushButton: pb_calibration:
                text = 'Intrisic Calibrate'
                clicked ::
                    box = MessageBox()
                    box.title = 'Geometric Calibration'
                    box.content = 'Do you want to do geometric calibration?'
                    box.buttons = [DialogButton('Accept', 'accept'),
                                   DialogButton('Cancel', 'reject')]
                    if sys.platform == 'win32':
                        data, size = winutil.load_icon(winutil.OIC_INFORMATION)
                        box.image = Image(data=data, raw_size=size, format='argb32')
                    box.set_parent(root_object())
                    box.exec_()
                    if box.buttons[0].was_clicked:
                        root_object().main_model.send_message(
                            server_model_,
                            gs.MSG_TYPE_CALIBRATION,
                            kwds=dict(
                                nx=calib_nx.value,
                                ny=calib_ny.value,
                                imgs_num=calib_imgs.value,
                                delay=calib_delay.value,
                                exposure_us=exposure_us if exposure_us>0 else None,
                                gain_db=gain_db if gain_db>0 else None,
                                gain_boost=gain_boost
                            )
                        )

            PushButton: pb_dark_image:
                text = 'Dark Images'
                clicked ::
                    box = MessageBox()
                    box.title = 'Dark Images'
                    box.content = 'Do you want to measure dark images?'
                    box.buttons = [DialogButton('Accept', 'accept'),
                                   DialogButton('Cancel', 'reject')]
                    if sys.platform == 'win32':
                        data, size = winutil.load_icon(winutil.OIC_INFORMATION)
                        box.image = Image(data=data, raw_size=size, format='argb32')
                    box.set_parent(root_object())
                    box.exec_()
                    if box.buttons[0].was_clicked:
                        root_object().main_model.send_message(
                            server_model_,
                            gs.MSG_TYPE_DARK_IMAGES
                        )


enamldef ExtrinsicControlPage(Page):
    attr server_model_

    VGroup:
        HGroup:
            PushButton: update_pb:
                text = 'Update Days'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_SUN_DAYS,
                    )

            ObjectCombo: query_day:
                items << server_model_.sun_days_list

            Label:
                text = 'Residual Threshold:'
            FloatField: residual_threshold:
                value = 0.05

            CheckBox: cb_default_pos:
                tool_tip = "Use default Lon/Lat/Alt. Useful in conjuction with radiometric calibration."
                text = "Default Postion"

            PushButton: pb_extrinsic:
                text = 'Extrinsic Calibrate'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_EXTRINSIC,
                        kwds=dict(
                            date=query_day.selected,
                            residual_threshold=residual_threshold.value,
                            save=True,
                            default_position=cb_default_pos.checked
                        )
                    )

        MayaviCanvas: mcanvas:
            scene << server_model_.extrinsic_scene
            show_toolbar = True


enamldef RadiometricControlPage(Page):
    attr server_model_

    alias sunphotometer_times: time_combo.items
    alias selected_time: time_combo.selected

    VGroup:
        HGroup:
            PushButton: update_pb:
                text = 'Update Days'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_DAYS,
                    )

            ObjectCombo: query_day:
                items << server_model_.days_list

            PushButton: pb_day:
                text = 'Get SP Times'
                clicked ::
                    #
                    # Get alm file.
                    #
                    date = query_day.selected
                    base_path = pkg_resources.resource_filename(
                        'CameraNetwork',
                        '../data/aeronet/{}/*.alm'.format(date.strftime("%Y_%m"))
                    )
                    path = glob.glob(base_path)
                    if path == []:
                        time_combo.items = []
                    else:
                        df = spm.parseSunPhotoMeter(path[0])
                        spm_df = df[date.strftime("%Y-%m-%d")]
                        spm_df = [spm_df[spm_df["Wavelength(um)"]==wl] for wl in (0.6744, 0.5000, 0.4405)]
                        time_combo.items = [d.strftime("%H:%M:%S") for d in spm_df[0].index]

            ObjectCombo: time_combo:
                pass

        HGroup:
            Label:
                text = 'Residual Threshold:'
            FloatField: residual_threshold:
                value = 1.

            CheckBox: cb_save:
               text = "Save"

            PushButton: pb_radiometric:
                text = 'Radiometric Calibrate'
                clicked ::
                    root_object().main_model.send_message(
                        server_model_,
                        gs.MSG_TYPE_RADIOMETRIC,
                        kwds=dict(
                            date=query_day.selected, # date=radiometric_day.date
                            time_index=time_combo.items.index(time_combo.selected),
                            residual_threshold=residual_threshold.value,
                            save=cb_save.checked
                        )
                    )

        MPLCanvas: canvas:
            figure << server_model_.radiometric_figure
